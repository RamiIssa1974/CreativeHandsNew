{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, Input } from '@angular/core';\nimport { OrdersService } from '../../services/orders.service';\nlet ProductDetailsComponent = class ProductDetailsComponent {\n  constructor(orderService, el) {\n    this.orderService = orderService;\n    this.el = el;\n    this.selctedColours = [];\n    this.selected = false;\n    this.showAddedToCartMessage = false;\n  }\n  ngOnInit() {\n    // Initialization logic here\n  }\n  showImage(ind) {\n    if (this.product && ind >= 0 && ind < this.product.Images.length) {\n      const elms = document.querySelectorAll(\".current-image\");\n      const elentToShow = elms[ind];\n      elms.forEach(itm => {\n        itm.style.display = 'none';\n      });\n      elentToShow.style.display = 'block';\n    }\n  }\n  incAddProdQuantity(elm) {\n    if (elm && elm.value) {\n      elm.value = (parseInt(elm.value) + 1).toString();\n    }\n  }\n  decAddProdQuantity(elm) {\n    if (elm && elm.value && parseInt(elm.value) > 1) {\n      elm.value = (parseInt(elm.value) - 1).toString();\n    }\n  }\n  addToCart(product, quantity, selectedPrice) {\n    let productVariationsDiv = null;\n    if (product.ProductVariations.length > 0) {\n      const id = `productVariations${product.Id}Div`;\n      productVariationsDiv = document.querySelector(`#${id}`);\n      if (!selectedPrice) {\n        productVariationsDiv?.classList.remove(\"hidden\");\n        return;\n      }\n    }\n    const prodVar = product.ProductVariations.find(x => x.Id.toString() == selectedPrice?.value);\n    const orderItem = {\n      Id: -1,\n      OrderId: -1,\n      UnitPrice: prodVar ? prodVar.Price : -1,\n      Quantity: quantity,\n      Note: \"\",\n      ProductVariation: prodVar ?? null,\n      Product: product,\n      Colours: this.selctedColours\n    };\n    this.orderService.addToCart(orderItem).subscribe(orderId => {\n      this.selctedColours = [];\n      this.orderService.updateCartQuantity(orderItem.Quantity);\n      productVariationsDiv?.classList.add(\"hidden\");\n    });\n    this.showAddedToCartMessage = true;\n    setTimeout(() => {\n      this.showAddedToCartMessage = false;\n    }, 3000);\n  }\n  closeDiv(productId) {\n    const id = `productVariations${productId}Div`;\n    const productVariationsDiv = document.querySelector(`#${id}`);\n    productVariationsDiv?.classList.add(\"hidden\");\n  }\n  changeSelectedProductVariation(product, selectedPrice, prodQuantity, varTotal) {\n    const prodVar = product.ProductVariations.find(x => x.Id == selectedPrice);\n    if (prodVar) {\n      varTotal.value = (prodVar.Price * parseInt(prodQuantity.value)).toString();\n    }\n  }\n  incAddProdVarQuantity(product, selectedPrice, prodQuantity, varTotal) {\n    if (prodQuantity && selectedPrice) {\n      prodQuantity.value = (parseInt(prodQuantity.value) + 1).toString();\n      const prodVar = product.ProductVariations.find(x => x.Id.toString() == selectedPrice.value);\n      if (prodVar) {\n        varTotal.value = (prodVar.Price * parseInt(prodQuantity.value)).toString();\n      }\n    }\n  }\n  decAddProdVarQuantity(product, selectedPrice, prodQuantity, varTotal) {\n    if (prodQuantity && parseInt(prodQuantity.value) > 1) {\n      prodQuantity.value = (parseInt(prodQuantity.value) - 1).toString();\n      const prodVar = product.ProductVariations.find(x => x.Id.toFixed() == selectedPrice.value);\n      if (prodVar) {\n        varTotal.value = (prodVar.Price * parseInt(prodQuantity.value)).toString();\n      }\n    }\n  }\n  closeProductDetailsPopup() {\n    const productPopup = document.querySelector(\".popup\");\n    productPopup.hidden = true;\n    const modalBackdrop = document.querySelector(\".modal-backdrop\");\n    modalBackdrop.style.display = \"none\";\n  }\n  selectColour(event, colour) {\n    const target = event.target;\n    const hasClass = target.classList.contains('selected');\n    if (hasClass) {\n      target.classList.remove('selected');\n      this.selctedColours = this.selctedColours.filter(clr => clr !== colour);\n    } else {\n      target.classList.add('selected');\n      this.selctedColours.push(colour);\n    }\n  }\n};\n__decorate([Input(), __metadata(\"design:type\", Object)], ProductDetailsComponent.prototype, \"product\", void 0);\nProductDetailsComponent = __decorate([Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.css']\n}), __metadata(\"design:paramtypes\", [OrdersService, ElementRef])], ProductDetailsComponent);\nexport { ProductDetailsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}