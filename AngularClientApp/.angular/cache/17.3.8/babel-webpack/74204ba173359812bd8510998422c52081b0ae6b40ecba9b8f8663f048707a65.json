{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CustomValidator } from '../../Model/Validators/CustomValidators';\nimport { AuthService } from '../../services/auth.service';\nimport { ProductsService } from '../../services/products.service';\nlet AddEditProductComponent = class AddEditProductComponent {\n  // Accessors\n  get isLoggedIn() {\n    return this.authService.isLoggedIn;\n  }\n  get isAdmin() {\n    return this.authService.isAdmin;\n  }\n  get fileUploaders() {\n    //console.log(JSON.stringify(this.productForm.controls['file_uploaders']));\n    return this.productForm.controls['file_uploaders'].value;\n  }\n  get productImages() {\n    return this.productForm.controls['Images'].value.controls;\n  }\n  get prodId() {\n    return this.productForm.get('Id');\n  }\n  get prodName() {\n    return this.productForm.get('Name');\n  }\n  get prodPrice() {\n    return this.productForm.get('Price');\n  }\n  get prodDescription() {\n    return this.productForm.get('Description');\n  }\n  get prodSalePrice() {\n    return this.productForm.get('SalePrice');\n  }\n  get prodStockQuantity() {\n    return this.productForm.get('StockQuantity');\n  }\n  get prodBarcode() {\n    return this.productForm.get('Barcode');\n  }\n  get productVariations() {\n    return this.productForm.get('ProductVariations');\n  }\n  get prodAvailableColours() {\n    return this.productForm.get('AvailableColours');\n  }\n  constructor(route, productServices, fb, authService, router) {\n    this.route = route;\n    this.productServices = productServices;\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.newFiles = [];\n    this.deletedFiles = [];\n    this.isLoading = false;\n    this.productId = -1;\n    this.product = null;\n    this.categories = [];\n    this.filesToUpload = [];\n    this.selectedfileName = \"please select a file\";\n    this.errorMessage = 'OK';\n    this.productForm = new FormGroup({});\n    this.filesCounter = 0;\n    this.colours = [];\n    this.selectedColour = '#0000ff';\n  }\n  ngOnInit() {\n    if (!(this.isLoggedIn && this.isAdmin)) {\n      this.router.navigateByUrl(this.authService.redirectUrl || '/');\n    }\n    this.productForm = this.getEmptyForm();\n    this.route.params.subscribe(params => {\n      this.productId = params['id'];\n      this.productServices.getCategories().subscribe({\n        next: cats => {\n          cats.forEach(cat => cat.IsBelongToProduct = false);\n          this.categories = cats;\n        },\n        error: err => this.errorMessage = err\n      });\n      if (this.productId != null) {\n        let search = {\n          Id: this.productId,\n          Barcode: \"\",\n          Description: \"\",\n          Name: \"\",\n          CategoryId: -1,\n          SubCategoryId: -1\n        };\n        this.productServices.getProducts(search).subscribe({\n          next: products => {\n            this.product = products[0];\n            this.categories.forEach(cat => {\n              cat.IsBelongToProduct = this.product?.Categories?.some(ct => ct.Id === cat.Id) || false;\n            });\n            this.productForm = this.getFormFromProduct(this.product);\n          },\n          error: err => this.errorMessage = err\n        });\n      } else {\n        this.productForm = this.getEmptyForm();\n      }\n    });\n  }\n  onCatChange(event, catId) {\n    const isChecked = event.target.checked;\n    const category = this.categories.find(cat => cat.Id === catId);\n    if (category) {\n      category.IsBelongToProduct = isChecked;\n      const categoriesArray = this.productForm.get('Categories');\n      if (isChecked) {\n        categoriesArray.push(new FormControl(catId));\n      } else {\n        const index = categoriesArray.controls.findIndex(ctrl => ctrl.value === catId);\n        if (index !== -1) {\n          categoriesArray.removeAt(index);\n        }\n      }\n      categoriesArray.updateValueAndValidity();\n      this.productForm.updateValueAndValidity();\n    }\n  }\n  // onSelectFile(files: FileList) {\n  //   //console.log(\"url\" + JSON.stringify(files[0]));\n  //   this.selectedfileName = files[0].name;\n  //   //this.filesToUpload.push.apply(this.filesToUpload, files);\n  //   this.filesToUpload.push(...files);\n  //   (this.productForm.controls['Images'].value as FormArray).push(new FormControl([files[0].name]));\n  //   this.productForm.controls['Images'].updateValueAndValidity();\n  //   this.productForm.updateValueAndValidity();\n  // }\n  onSelectFile(files) {\n    if (files.length > 0) {\n      // Convert FileList to an array of File objects\n      const fileArray = Array.from(files);\n      // Spread the fileArray into filesToUpload\n      this.filesToUpload.push(...fileArray);\n      // Optionally, update the form control for images\n      this.productForm.controls['Images'].push(new FormControl([fileArray[0].name]));\n      this.productForm.controls['Images'].updateValueAndValidity();\n      this.productForm.updateValueAndValidity();\n    }\n  }\n  deleteFile(filename, index) {\n    //this.productForm.controls['Images'].value.removeAt(index);\n    this.productForm.get('Images').removeAt(index);\n    this.filesToUpload.splice(index, 1);\n    this.productForm.controls['Images'].updateValueAndValidity();\n    this.productForm.updateValueAndValidity();\n  }\n  getEmptyForm() {\n    return this.fb.group({\n      Id: [{\n        value: 0,\n        disabled: true\n      }],\n      Name: [\"\", [Validators.required, Validators.minLength(3)]],\n      Description: \"\",\n      Price: [\"\", [Validators.required, Validators.min(0.01), CustomValidator.numeric]],\n      SalePrice: [\"\", [Validators.min(0), CustomValidator.numeric]],\n      StockQuantity: [\"\", [Validators.required, Validators.min(0), CustomValidator.numeric]],\n      Barcode: \"\",\n      CategoryId: 0,\n      SubCategoryId: 0,\n      Images: this.fb.array([]),\n      Categories: this.fb.array([]),\n      ProductVariations: this.fb.array([]),\n      AvailableColours: this.fb.array([])\n    });\n  }\n  getFormFromProduct(product) {\n    return this.fb.group({\n      Id: [{\n        value: product.Id,\n        disabled: true\n      }],\n      Name: [product.Name, [Validators.required, Validators.minLength(3)]],\n      Description: product.Description,\n      Price: [product.Price, [Validators.required, Validators.min(0), CustomValidator.numeric]],\n      SalePrice: [product.SalePrice, [Validators.min(0), CustomValidator.numeric]],\n      StockQuantity: [product.StockQuantity, [Validators.required, Validators.min(0), CustomValidator.numeric]],\n      Barcode: product.Barcode,\n      CategoryId: product.CategoryId,\n      SubCategoryId: product.SubCategoryId,\n      Images: this.getImagesArray(product),\n      Categories: this.getCategoreisArray(product),\n      ProductVariations: this.getProductVariationsArray(product),\n      AvailableColours: this.getProductAvailableColoursArray(product) // Ensure this is initialized properly\n    });\n  }\n  getImagesArray(product) {\n    var imagesFgArr = this.fb.array([]);\n    product.Images.forEach(im => imagesFgArr.push(new FormControl([im])));\n    return imagesFgArr;\n  }\n  getCategoreisArray(product) {\n    var imagesFgArr = this.fb.array([]);\n    product.Categories.forEach(ct => imagesFgArr.push(new FormControl([ct.Id])));\n    return imagesFgArr;\n  }\n  // getProductVariationsArray(product: IProduct) :FormArray {\n  //   var varsFgArr = this.fb.array([]);\n  //   product.ProductVariations.forEach(pv => {\n  //     const group = new FormGroup({\n  //       Description: new FormControl(pv.Description),\n  //       Price: new FormControl(pv.Price)\n  //     });\n  //     varsFgArr.push(group);\n  //   });\n  //   return varsFgArr;\n  // }\n  getProductVariationsArray(product) {\n    const varsFgArr = this.fb.array([]);\n    product.ProductVariations.forEach(pv => {\n      const group = new FormGroup({\n        Description: new FormControl(pv.Description),\n        Price: new FormControl(pv.Price)\n      });\n      varsFgArr.push(group);\n    });\n    return varsFgArr;\n  }\n  getProductAvailableColoursArray(product) {\n    const clrsFgArr = this.fb.array([]);\n    product.AvailableColours.forEach(clr => {\n      const group = new FormGroup({\n        Colour: new FormControl(clr)\n      });\n      clrsFgArr.push(group);\n    });\n    return clrsFgArr;\n  }\n  saveProduct() {\n    this.isLoading = true;\n    const productImgs = this.productImages.controls.map(im => im.value.toString().trim());\n    // Define the type for `pv` as FormGroup\n    // Ensure the form array is cast as an array of FormGroups\n    const productVariationsArray = this.productForm.get('ProductVariations');\n    // Map over the FormArray's controls, assuming they are FormGroup instances\n    const prodVars = productVariationsArray.controls.map(pv => {\n      const group = pv;\n      return {\n        Description: group.get('Description')?.value || '',\n        Price: group.get('Price')?.value || 0\n      };\n    });\n    const request = {\n      Id: this.prodId?.value ?? 0,\n      Name: this.prodName?.value ?? '',\n      Description: this.prodDescription?.value ?? '',\n      Barcode: this.prodBarcode?.value ?? '',\n      Price: this.prodPrice?.value ?? 0,\n      SalePrice: this.prodSalePrice?.value ?? 0,\n      StockQuantity: this.prodStockQuantity?.value ?? 0,\n      Categories: this.categories.filter(ct => ct.IsBelongToProduct).map(cat => cat.Id),\n      Images: productImgs,\n      UploadedImages: [],\n      ProductVariations: prodVars,\n      AvailableColours: this.prodAvailableColours.controls.map(clr => clr.value.Colour)\n    };\n    this.productServices.saveProductAndFiles(this.filesToUpload, request).subscribe(uploadRes => {\n      uploadRes.UploadedImages.forEach(im => request.UploadedImages.push(im));\n      request.Id = uploadRes.ProductId;\n      //console.log(\"uploadRes.ProductId: \" + uploadRes.ProductId);\n      this.productServices.saveProduct(request).subscribe({\n        next: productId => {\n          this.isLoading = false;\n          this.router.navigateByUrl('/add-product/' + uploadRes.ProductId);\n        },\n        error: err => {\n          this.errorMessage = err;\n          console.log(\"saved failed with error:\" + err);\n          this.isLoading = false;\n        }\n      });\n    });\n  }\n  InvalidControls() {\n    const invalid = [];\n    const controls = this.productForm.controls;\n    for (const name in controls) {\n      if (controls[name].invalid) {\n        invalid.push(name);\n      }\n    }\n    return invalid;\n  }\n  deleteProductVariations(index) {\n    const productVariationsArray = this.productVariations;\n    productVariationsArray.removeAt(index);\n  }\n  deleteAvailableColour(index) {\n    const availableColoursArray = this.prodAvailableColours;\n    availableColoursArray.removeAt(index);\n  }\n  // deleteProductVariations(index: number): void {\n  //   this.productForm.controls['ProductVariations'].value.controls.splice(index, 1);\n  // }\n  // deleteAvailableColour(index: number): void {\n  //   this.productForm.controls['AvailableColours'].value.controls.splice(index, 1);\n  // }\n  addAvailableColour() {\n    const group = new FormGroup({\n      Colour: new FormControl(this.selectedColour)\n    });\n    const availableColoursArray = this.productForm.get('AvailableColours');\n    if (availableColoursArray) {\n      availableColoursArray.push(group);\n    } else {\n      console.error('AvailableColours form array is not defined');\n    }\n  }\n  addVariation(price, description) {\n    if (price.value && description.value) {\n      const group = this.fb.group({\n        Description: [description.value],\n        Price: [price.value]\n      });\n      //const productVariationsArray = this.productForm.get('ProductVariations') as FormArray;\n      const productVariationsArray = this.productVariations;\n      productVariationsArray.push(group);\n      price.reset();\n      description.reset();\n    }\n  }\n};\nAddEditProductComponent = __decorate([Component({\n  selector: 'app-add-edit-product',\n  templateUrl: './add-edit-product.component.html',\n  styleUrls: ['./add-edit-product.component.css']\n}), __metadata(\"design:paramtypes\", [ActivatedRoute, ProductsService, FormBuilder, AuthService, Router])], AddEditProductComponent);\nexport { AddEditProductComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}