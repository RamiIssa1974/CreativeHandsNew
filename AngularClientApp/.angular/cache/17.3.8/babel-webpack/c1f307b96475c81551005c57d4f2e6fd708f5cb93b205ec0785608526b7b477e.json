{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.getUserUrl = `${environment.baseApiUrl}api/users/user-info`;\n      this.currentUser = null;\n    }\n    login(userName, password) {\n      return this.getUserFromDb(userName, password).pipe(tap(user => {\n        if (user) {\n          this.setCookie('isLoggedIn', 'true', 1);\n          this.setCookie('isAdmin', user.IsAdmin.toString(), 1);\n          this.currentUser = user;\n        }\n      }));\n    }\n    logout() {\n      this.setCookie('isLoggedIn', 'false', 1);\n      this.setCookie('isAdmin', 'false', 1);\n      this.currentUser = null;\n    }\n    get isAdmin() {\n      const admin = this.getCookie('isAdmin');\n      return admin === 'true';\n    }\n    get isLoggedIn() {\n      const logged = this.getCookie('isLoggedIn');\n      return logged === 'true';\n    }\n    get isLoggedOut() {\n      return !this.isLoggedIn;\n    }\n    getUserFromDb(userName, password) {\n      const searchParam = {\n        UserName: userName,\n        Password: password\n      };\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.post(this.getUserUrl, searchParam, httpOptions);\n    }\n    setCookie(name, value, days) {\n      let expires = '';\n      if (days) {\n        const date = new Date();\n        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n        expires = `; expires=${date.toUTCString()}`;\n      }\n      document.cookie = `${name}=${value || ''}${expires}; path=/`;\n    }\n    getCookie(name) {\n      const nameEQ = `${name}=`;\n      const ca = document.cookie.split(';');\n      for (let i = 0; i < ca.length; i++) {\n        let c = ca[i];\n        while (c.charAt(0) === ' ') c = c.substring(1);\n        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n      }\n      return null;\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}