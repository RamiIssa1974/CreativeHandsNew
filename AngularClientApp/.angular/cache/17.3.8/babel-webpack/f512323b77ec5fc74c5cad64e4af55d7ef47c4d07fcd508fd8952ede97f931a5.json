{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let OrdersService = /*#__PURE__*/(() => {\n  class OrdersService {\n    constructor(http) {\n      this.http = http;\n      this.getCartUrl = environment.baseApiUrl + \"api/orders/cart\";\n      this.getOrderUrl = environment.baseApiUrl + \"api/orders/Order\";\n      this.getOrdersUrl = environment.baseApiUrl + \"api/orders/Orders\";\n      this.saveOrderUrl = environment.baseApiUrl + \"api/orders/SaveOrder\";\n      this.ChangeOrderStatusUrl = environment.baseApiUrl + \"api/orders/ChangeOrderStatus\";\n      this.addToCartUrl = environment.baseApiUrl + \"api/orders/add-to-cart\";\n      this.sendOrderUrl = environment.baseApiUrl + \"api/orders/SendOrder\";\n      this.initialCartQuantity = 0;\n      //cart Quantity begaviour object\n      this.cartQuantityBS$ = new BehaviorSubject(this.initialCartQuantity);\n      this.cartQuantityOBS = this.cartQuantityBS$.asObservable();\n      //show cart icon begaviour object\n      this.showCartIconBS$ = new BehaviorSubject(true);\n      this.showCartIconOBS = this.showCartIconBS$.asObservable();\n      this.getCart().subscribe(order => {\n        if (order) {\n          this.initialCartQuantity = order.OrderItems.map(oi => oi.Quantity).reduce((a, b) => a + b, 0);\n          this.setCartQuantity(this.initialCartQuantity);\n        } else {\n          this.setCartQuantity(0);\n        }\n      });\n    }\n    ngOnInit() {\n      console.log(\"ngOnInit\");\n      this.getCart().subscribe(order => {\n        this.initialCartQuantity = order.OrderItems.map(oi => oi.Quantity).reduce((a, b) => a + b, 0);\n        this.setCartQuantity(this.initialCartQuantity);\n        this.cartOrder = order;\n      });\n    }\n    getOrderById(orderId) {\n      let httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Headers': 'Content-Type',\n          'Access-Control-Allow-Methods': 'GET',\n          'Access-Control-Allow-Origin': '*'\n        })\n      };\n      let request = {\n        OrderId: orderId,\n        CustomerId: -1,\n        StatusId: -1,\n        CustomerName: \"\",\n        CustomerTel: \"\"\n      };\n      return this.http.post(this.getOrderUrl, request);\n    }\n    getOrders(requuest) {\n      return this.http.post(this.getOrdersUrl, requuest);\n    }\n    saveOrder(order) {\n      this.initialCartQuantity = order.OrderItems.map(oi => oi.Quantity).reduce((a, b) => a + b, 0);\n      this.setCartQuantity(this.initialCartQuantity);\n      return this.http.post(this.saveOrderUrl, order);\n    }\n    changeOrderStatus(order) {\n      return this.http.post(this.ChangeOrderStatusUrl, order);\n    }\n    sendOrder(request) {\n      return this.http.post(this.sendOrderUrl, request);\n    }\n    getUserIdFromCookies() {\n      const cartId = document.cookie.split('; ').find(row => row.startsWith(\"userId\"));\n      if (!cartId) {\n        var id = this.getGuidId();\n        document.cookie = \"userId=\" + id;\n        return id;\n      } else {\n        return cartId.split('=')[1];\n      }\n    }\n    getGuidId() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    }\n    getCart() {\n      let userId = this.getUserIdFromCookies();\n      let request = {\n        UserId: userId\n      };\n      return this.http.get(this.getCartUrl + \"?userId=\" + userId);\n    }\n    addToCart(ordrItem) {\n      let request = {\n        UserId: this.getUserIdFromCookies(),\n        OrderItem: ordrItem\n      };\n      return this.http.post(this.addToCartUrl, request);\n    }\n    setCartQuantity(quantity) {\n      //console.log(\"setting currentQuantity to: \" + quantity);\n      this.cartQuantityBS$.next(quantity);\n    }\n    updateCartQuantity(quantity) {\n      let newval = 0;\n      if (quantity) {\n        let currentQuantity = this.cartQuantityBS$.getValue();\n        newval = +currentQuantity + +quantity;\n        //console.log(\"updating currentQuantity to: \" + newval);\n      }\n      this.cartQuantityBS$.next(newval);\n    }\n    setShowCart(newval) {\n      this.showCartIconBS$.next(newval);\n      console.log(\"showCartIcon set to:\" + newval);\n      if (newval) {\n        if (this.cartOrder) {\n          this.cartQuantityBS$.next(this.cartOrder.OrderItems.map(oi => oi.Quantity).reduce((a, b) => a + b, 0));\n        } else {\n          this.getCart().subscribe(cart => {\n            if (cart) {\n              this.cartOrder = cart;\n              this.cartQuantityBS$.next(this.cartOrder.OrderItems.map(oi => oi.Quantity).reduce((a, b) => a + b, 0));\n            } else {\n              this.cartQuantityBS$.next(0);\n            }\n          });\n        }\n      }\n    }\n    static #_ = this.ɵfac = function OrdersService_Factory(t) {\n      return new (t || OrdersService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrdersService,\n      factory: OrdersService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return OrdersService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}